# Development Docker Compose
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: optimizely-postgres-dev
    environment:
      POSTGRES_DB: optimizely_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - optimizely-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: optimizely-redis-dev
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - optimizely-network

  # API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    container_name: optimizely-api-dev
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/optimizely_dev
      REDIS_URL: redis://redis:6379
      API_PORT: 4000
      CORS_ORIGIN: http://localhost:3001
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      JWT_SECRET: dev-jwt-secret-key
      SESSION_SECRET: dev-session-secret-key
      LOG_LEVEL: debug
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - optimizely-network
    restart: unless-stopped

  # Web Service
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: production
    container_name: optimizely-web-dev
    environment:
      NODE_ENV: development
      PORT: 3001
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
      NEXTAUTH_URL: http://localhost:3001
      NEXTAUTH_SECRET: dev-nextauth-secret
    ports:
      - "3001:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - optimizely-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  optimizely-network:
    driver: bridge
